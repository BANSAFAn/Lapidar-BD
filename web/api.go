package web

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"

	"discord-bot/config"
)

// APIServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
type APIServer struct {
	config *config.Config
	addr   string
}

// BotStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
type BotStats struct {
	Servers     int    `json:"servers"`
	Users       int    `json:"users"`
	Channels    int    `json:"channels"`
	Commands    int    `json:"commands"`
	Uptime      string `json:"uptime"`
	MemoryUsage string `json:"memoryUsage"`
}

// Command –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
type Command struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Usage       string `json:"usage"`
	Category    string `json:"category"`
	Enabled     bool   `json:"enabled"`
}

// NewAPIServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API —Å–µ—Ä–≤–µ—Ä–∞
func NewAPIServer(cfg *config.Config) *APIServer {
	return &APIServer{
		config: cfg,
		addr:   fmt.Sprintf("%s:%d", cfg.WebInterface.Host, cfg.WebInterface.Port),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä
func (api *APIServer) Start() error {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	http.HandleFunc("/api/config", api.handleCORS(api.handleGetConfig))
	http.HandleFunc("/api/save-config", api.handleCORS(api.handleSaveConfig))
	http.HandleFunc("/api/stats", api.handleCORS(api.handleGetStats))
	http.HandleFunc("/api/commands", api.handleCORS(api.handleGetCommands))
	http.HandleFunc("/api/update-command", api.handleCORS(api.handleUpdateCommand))

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	fs := http.FileServer(http.Dir("web/frontend/build"))
	http.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
		if len(r.URL.Path) >= 4 && r.URL.Path[:4] == "/api" {
			return
		}

		// –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–¥–∞–µ–º index.html
		if r.URL.Path != "/" && !FileExists("web/frontend/build"+r.URL.Path) {
			http.ServeFile(w, r, "web/frontend/build/index.html")
			return
		}
		fs.ServeHTTP(w, r)
	}))

	// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ API —Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
	fmt.Println("‚ïë                                                        ‚ïë")
	fmt.Println("‚ïë  üåê –í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord –±–æ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω–∞!     ‚ïë")
	fmt.Printf("‚ïë  üìå –ê–¥—Ä–µ—Å: http://%s                           ‚ïë\n", api.addr)
	fmt.Println("‚ïë  ‚öôÔ∏è  –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚ïë")
	fmt.Println("‚ïë                                                        ‚ïë")
	fmt.Println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")

	return http.ListenAndServe(api.addr, nil)
}

// handleCORS –¥–æ–±–∞–≤–ª—è–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç–∞–º
func (api *APIServer) handleCORS(handler http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		handler(w, r)
	}
}

// handleGetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
func (api *APIServer) handleGetConfig(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(api.config)
}

// handleSaveConfig —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
func (api *APIServer) handleSaveConfig(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var newConfig config.Config
	if err := json.NewDecoder(r.Body).Decode(&newConfig); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	api.config.Token = newConfig.Token
	api.config.Prefix = newConfig.Prefix
	api.config.BotName = newConfig.BotName
	api.config.DefaultLanguage = newConfig.DefaultLanguage
	api.config.WebInterface = newConfig.WebInterface

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
	if err := config.Save(api.config); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: "+err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"status": "success"})
}

// handleGetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
func (api *APIServer) handleGetStats(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–æ—Ç–∞
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	stats := BotStats{
		Servers:     15,
		Users:       1250,
		Channels:    87,
		Commands:    42,
		Uptime:      "3 –¥–Ω—è 7 —á–∞—Å–æ–≤",
		MemoryUsage: "128 MB",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(stats)
}

// handleGetCommands –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
func (api *APIServer) handleGetCommands(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –±–æ—Ç–∞
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	commands := []Command{
		{
			Name:        "help",
			Description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
			Usage:       "!help [–∫–æ–º–∞–Ω–¥–∞]",
			Category:    "–û—Å–Ω–æ–≤–Ω—ã–µ",
			Enabled:     true,
		},
		{
			Name:        "ping",
			Description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞",
			Usage:       "!ping",
			Category:    "–£—Ç–∏–ª–∏—Ç—ã",
			Enabled:     true,
		},
		{
			Name:        "ban",
			Description: "–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
			Usage:       "!ban @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ø—Ä–∏—á–∏–Ω–∞]",
			Category:    "–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
			Enabled:     true,
		},
		{
			Name:        "play",
			Description: "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ",
			Usage:       "!play [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ]",
			Category:    "–ú—É–∑—ã–∫–∞",
			Enabled:     true,
		},
		{
			Name:        "stats",
			Description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞",
			Usage:       "!stats",
			Category:    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
			Enabled:     true,
		},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(commands)
}

// handleUpdateCommand –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
func (api *APIServer) handleUpdateCommand(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var command Command
	if err := json.NewDecoder(r.Body).Decode(&command); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"status": "success"})
}

// FileExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
func FileExists(filename string) bool {
	_, err := os.Stat(filename)
	return !os.IsNotExist(err)
}
