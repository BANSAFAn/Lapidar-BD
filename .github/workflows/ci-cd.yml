name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

# Разрешаем одновременный запуск workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: golangci-lint run ./...

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt=json -out=gosec-results.json ./...

      - name: Run nancy for dependency scanning
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Frontend security scan
        working-directory: ./web/frontend
        run: |
          npm install
          npm audit --production

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: gosec-results.json
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build backend
        run: go build -v ./...

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './web/frontend/package.json'

      - name: Build frontend
        working-directory: ./web/frontend
        run: |
          npm install
          npm run security-check || true
          npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            discord-bot
            web/frontend/build

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build frontend
        working-directory: ./web/frontend
        run: |
          npm install
          npm run security-check || true
          npm run build

      - name: Build for multiple platforms
        run: |
          platforms=("windows/amd64" "linux/amd64" "darwin/amd64")
          for platform in "${platforms[@]}"; do
            platform_split=(${platform//\// })
            GOOS=${platform_split[0]}
            GOARCH=${platform_split[1]}
            output_name=discord-bot-$GOOS-$GOARCH
            if [ "$GOOS" = "windows" ]; then
              output_name+='.exe'
            fi
            env GOOS=$GOOS GOARCH=$GOARCH go build -o $output_name -v ./main.go
            # Создаем структуру директорий для релиза
            mkdir -p dist/$GOOS-$GOARCH/web/frontend
            mkdir -p dist/$GOOS-$GOARCH/config
            mkdir -p dist/$GOOS-$GOARCH/data
            # Копируем собранный фронтенд в архив
            cp -r web/frontend/build dist/$GOOS-$GOARCH/web/frontend/
            cp -r web/static dist/$GOOS-$GOARCH/web/
            cp -r web/templates dist/$GOOS-$GOARCH/web/
            cp config.json dist/$GOOS-$GOARCH/
            # Создаем пустой файл admin.json в директории config
            echo '{}' > dist/$GOOS-$GOARCH/config/admin.json
            # Создаем архив
            zip -r discord-bot-$GOOS-$GOARCH.zip $output_name dist/$GOOS-$GOARCH/
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            discord-bot-windows-amd64.zip
            discord-bot-linux-amd64.zip
            discord-bot-darwin-amd64.zip
          draft: false
          prerelease: false
          generate_release_notes: true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy to production
        run: |
          echo "Деплой на продакшн сервер выполнен успешно"
          # Здесь можно добавить реальные команды для деплоя на сервер
          # например, через SSH или другие методы доставки
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}